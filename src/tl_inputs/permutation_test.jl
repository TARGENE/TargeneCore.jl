
permuted_name(name) = Symbol(name, :_permuted)

function permuted_estimand!(permutation_variables::Set, Ψ::ComposedEstimand)
    newargs = Tuple(permuted_estimand!(copy(permutation_variables), arg) for arg in Ψ.args)
    return ComposedEstimand(Ψ.f, newargs)
end

function permuted_estimand!(permutation_variables::Set, Ψ::T) where T
    outcome = if Ψ.outcome ∈ permutation_variables
        delete!(permutation_variables, Ψ.outcome)
        permuted_name(Ψ.outcome)
    else
        Ψ.outcome
    end

    permuted_treatments = Tuple(tn ∈ permutation_variables ? permuted_name(tn) : tn for tn in keys(Ψ.treatment_values))

    return T(
        outcome = outcome,
        treatment_values = NamedTuple{permuted_treatments}(values(Ψ.treatment_values)),
        treatment_confounders = NamedTuple{permuted_treatments}(values(Ψ.treatment_confounders)),
        outcome_extra_covariates = Ψ.outcome_extra_covariates
    )
end

make_permuted_col!(data, col; rng=StableRNG(123)) = 
    data[!, permuted_name(col)] = shuffle(rng, data[!, col])

function permute_dataset!(dataset, variables; rng=StableRNG(123))
    for colname in variables
        make_permuted_col!(dataset, colname; rng=rng)
    end
end

function update_valid_estimands!(valid_estimands, Ψ::ComposedEstimand, frequency_table; positivity_constraint=0.01)
    new_args = filter(
        x -> TMLE.satisfies_positivity(x, frequency_table, positivity_constraint=positivity_constraint), 
        Ψ.args
    )
    isempty(new_args) && return
    push!(valid_estimands, ComposedEstimand(Ψ.f, new_args))
end

function update_valid_estimands!(valid_estimands, Ψ, frequency_table; positivity_constraint=0.01)
    if TMLE.satisfies_positivity(Ψ, frequency_table, positivity_constraint=positivity_constraint)
        push!(valid_estimands, Ψ)
    end
end

filter_by_positivity_constraint(estimands, dataset, positivity_constraint::Nothing) = estimands

function filter_by_positivity_constraint(estimands, dataset, positivity_constraint=0.01)
    frequency_table = Dict()
    valid_estimands = []
    for Ψ in estimands
        treatments = treatment_variables(Ψ)
        if !haskey(frequency_table, treatments)
            frequency_table[treatments] = TMLE.frequency_table(dataset, treatments)
        end
        update_valid_estimands!(valid_estimands, Ψ, frequency_table[treatments],
            positivity_constraint=positivity_constraint
        )
    end
    return valid_estimands
end

function permute_dataset_and_get_valid_estimands!(dataset, variables, estimands; 
    rng_seed=123, 
    max_attempts=1,
    positivity_constraint=0.01,
    verbosity=0
    )
    n_estimands = length(estimands)
    permute_dataset!(dataset, variables; rng=StableRNG(rng_seed))
    valid_estimands = filter_by_positivity_constraint(
        estimands, 
        dataset, 
        positivity_constraint
    )
    # Return fast if only one attempt or all estimands already pass the constraint
    if max_attempts == 1 || length(valid_estimands) == n_estimands
        return valid_estimands
    end
    verbosity > 0 && @info(string("Initial permutation resulted in a loss of estimands, attempting again."))
    # We keep track of the best seed to reproduce the best permutation
    best_seed = rng_seed
    for attempt in 2:max_attempts
        rng_seed += 1
        rng = StableRNG(rng_seed)
        permute_dataset!(dataset, variables; rng=rng)
        attempt_valid_estimands = filter_by_positivity_constraint(
            estimands, 
            dataset,
            positivity_constraint
        )
        verbosity > 0 && @info(string(
            "After attempt ", attempt, "/", max_attempts, 
            " #Estimands=", length(attempt_valid_estimands), "/", n_estimands
        ))
        # Update valid_estimands if a better permutation has been found
        if length(attempt_valid_estimands) > length(valid_estimands)
            best_seed = rng_seed
            valid_estimands = attempt_valid_estimands
        end
        # Return fast if all estimands pass the constraint
        length(valid_estimands) == n_estimands && return valid_estimands
    end

    # If we got out the loop, it means no optimal permutation has been found
    # we reproduce the best one
    permute_dataset!(dataset, variables; rng=StableRNG(best_seed))

    return valid_estimands
end

"""
New parameters are generated by permuting treatment and target columns
at each order <= interaction order.
"""
function make_permutation_parameters(estimands; optimize=true, orders=(1,))
    parameters = []
    all_permuted_variables = Set{Symbol}([])
    for Ψ ∈ estimands
        treatments = treatment_variables(Ψ)
        outcomes = outcome_variables(Ψ)
        variables = vcat(treatments, outcomes)
        for order in orders
            for permutation_variables in combinations(variables, order)
                permutation_variables = Set(permutation_variables)
                union!(all_permuted_variables, permutation_variables)
                push!(parameters, permuted_estimand!(permutation_variables, Ψ))
            end
        end
    end
    if optimize
        parameters = groups_ordering(parameters, brute_force=false, do_shuffle=false)
    end
    return parameters, all_permuted_variables
end

function generate_permutation_parameters_and_dataset(parsed_args)
    # Parsing Arguments
    datafile = parsed_args["dataset"]
    resultsfile = parsed_args["results"]
    outdir = parsed_args["outdir"]
    pval_threshold = parsed_args["pval-threshold"]    
    verbosity = parsed_args["verbosity"]
    orders = parse.(Int, split(parsed_args["orders"], ","))
    limit = parsed_args["limit"]
    rng_seed = parsed_args["rng"]
    max_attempts = parsed_args["max-attempts"]
    chunksize = parsed_args["chunksize"]
    estimator_key = Symbol(parsed_args["estimator-key"])
    positivity_constraint = parsed_args["positivity-constraint"]

    # Generating Permutation Parameters
    verbosity > 0 && @info string("Retrieving significant parameters.")
    results = read_significant_results(resultsfile, threshold=pval_threshold, estimator_key=estimator_key)
    verbosity > 0 && @info string(size(results, 1), " estimands satisfying the p-value threshold.")
    verbosity > 0 && @info "Generating permutated estimands."
    permuted_estimands, permuted_variables = make_permutation_parameters(results; optimize=true, orders=orders)
    dataset = instantiate_dataset(datafile)
    verbosity > 0 && @info string("Finding a good permutation over ", max_attempts, " attemps.")
    permuted_estimands = permute_dataset_and_get_valid_estimands!(
        dataset, 
        permuted_variables, 
        permuted_estimands; 
        rng_seed=rng_seed, 
        max_attempts=max_attempts,
        positivity_constraint=positivity_constraint,
        verbosity=verbosity-1
    )
    if length(permuted_estimands) == 0
        throw(error("No permuted estimand remaining, consider increasing the p-value threshold or the maximum number of attempts."))
    end
    if limit !== nothing
        permuted_estimands = permuted_estimands[1:max(limit, length(permuted_estimands))]
    end
    verbosity > 0 && @info string("Writing ", length(permuted_estimands), " permuted estimands and dataset to disk.")
    write_parameter_files(outdir, permuted_estimands, chunksize)
    Arrow.write(joinpath(outdir, "permutation_dataset.arrow"), dataset)

    verbosity > 0 && @info "Done."
    return 0
end
